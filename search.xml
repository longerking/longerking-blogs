<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ChatGLM-Deploy-FastChat</title>
    <url>/longerking-blogs/2023/08/15/chatglm-deploy-fastchat/</url>
    <content><![CDATA[<h1 id="ChatGLM-Deploy-FastChat"><a href="#ChatGLM-Deploy-FastChat" class="headerlink" title="ChatGLM-Deploy-FastChat"></a>ChatGLM-Deploy-FastChat</h1><p>利用FastChat部署ChatGLM</p>
<p>Reference</p>
<blockquote>
<p><a class="link"   href="https://github.com/lm-sys/FastChathttps://github.com/lm-sys/FastChat/blob/main/docs/openai/_api.md" >https://github.com/lm-sys/FastChathttps://github.com/lm-sys/FastChat/blob/main/docs/openai\_api.md<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p><br><code>Note</code>： 一些screen窗口会话知识预备</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">screen <span class="literal">-S</span> fs<span class="literal">-glm-wkr</span> <span class="comment"># 创建一个名为fs-glm-wkr的会话</span></span><br><span class="line"><span class="comment"># ctrl+shift+d # 退出当前会话窗口，但会话内容保持后台</span></span><br><span class="line">screen <span class="literal">-r</span> fs<span class="literal">-glm-wkr</span> <span class="comment"># 连接到 fs-glm-wkr 会话窗口</span></span><br><span class="line"><span class="comment"># ctrl+d # 退出会话窗口，并停止整个窗口内程序</span></span><br><span class="line">screen <span class="literal">-ls</span> <span class="comment"># 查看所有会话窗口</span></span><br><span class="line">screen <span class="literal">-D</span> <span class="literal">-r</span> fs<span class="literal">-glm-wkr</span> <span class="comment"># 强制重连已经Attacted状态的窗口</span></span><br></pre></td></tr></table></figure>

<p>\</p>
<h3 id="Install-FastChat"><a href="#Install-FastChat" class="headerlink" title="Install FastChat"></a>Install FastChat</h3><p>使用依赖包安装或者使用源码安装，二选一即可。如果FastChat还不支持的模型，建议使用源码安装，再源码集成支持模型后在源码安装依赖包。 <code>Note</code>: FastChat支持对接chatglm是因为源码中，已经做了这部分的配置集成。这里的测试使用pip安装。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip3 install fschat</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git clone https://github.com/lm<span class="literal">-sys</span>/FastChat.git</span><br><span class="line"><span class="built_in">cd</span> FastChat</span><br><span class="line">pip3 install <span class="literal">--upgrade</span> pip  <span class="comment"># enable PEP 660 support</span></span><br><span class="line">pip3 install <span class="literal">-e</span> .</span><br></pre></td></tr></table></figure>

<p>\</p>
<h3 id="Load-Models"><a href="#Load-Models" class="headerlink" title="Load Models"></a>Load Models</h3><p>服务器部署模型，并提供l类似gpt 的 openai 接口方式访问。</p>
<ol>
<li><h4 id="Use-serve-cli-testing-model"><a href="#Use-serve-cli-testing-model" class="headerlink" title="Use serve.cli testing model"></a>Use serve.cli testing model</h4></li>
</ol>
<p>cli运行脚本如下</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python3 <span class="literal">-m</span> fastchat.serve.cli \</span><br><span class="line">        <span class="literal">--model-path</span> /mnt/models/chatglm2<span class="literal">-6b</span></span><br></pre></td></tr></table></figure>

<p>如图，会在终端生成如下交互问答</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">(chatglm)longer@codeWL<span class="variable">$</span> python3 <span class="literal">-m</span> fastchat.serve.cli <span class="literal">--model-path</span> /mnt/models/chatglm2<span class="literal">-6b</span></span><br><span class="line">Loading checkpoint shards: <span class="number">100</span>%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| <span class="number">16</span>/<span class="number">16</span> [<span class="number">00</span>:<span class="number">13</span>&lt;<span class="number">00</span>:<span class="number">00</span>,  <span class="number">1.18</span><span class="type">it</span>/<span class="type">s</span>]</span><br><span class="line">问: 你是谁？</span><br><span class="line">答: 我是一个名为 ChatGLM2<span class="literal">-6B</span> 的人工智能助手，是基于清华大学 KEG 实验室和智谱 AI 公司于 <span class="number">2023</span> 年共同训练的语言模型开发的。我的任务是针对用户的问题和要求提供适当的答复和支持。</span><br><span class="line">问: 如何使用fastchat</span><br><span class="line">答: Fastchat 是一个基于 Python 的聊天应用程序，可以使用它进行文本或语音聊天。要使用 Fastchat，您需要首先安装它。在终端中输入以下命令来安装 Fastchat：</span><br><span class="line">```</span><br><span class="line">pip install fastchat</span><br><span class="line">```</span><br><span class="line">安装完成后，您可以运行以下命令启动 Fastchat：</span><br><span class="line">```</span><br><span class="line">fastchat</span><br><span class="line">```</span><br><span class="line">然后，您可以通过输入 <span class="string">&quot;你好&quot;</span> 来启动 Fastchat 的语音聊天功能。</span><br><span class="line">```</span><br><span class="line">fastchat 你好</span><br><span class="line">```</span><br><span class="line">在 Fastchat 中，您可以向对方发送文本消息或语音消息。在发送文本消息时，您可以使用 emoji 表情符号和表情符来使消息更加生动。例如，要发送一个带有开心表情的表情符号，您可以使用以下代码：</span><br><span class="line">```</span><br><span class="line">fastchat :(</span><br><span class="line">```</span><br><span class="line">要发送一个带有哭泣表情的表情符号，您可以使用以下代码：</span><br><span class="line">```</span><br><span class="line">fastchat :<span class="string">&#x27;(</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">此外，Fastchat 还支持发送语音消息。要发送语音消息，请首先请确保您的计算机已安装了浏览器，并将 Fastchat 的语音消息 URL 复制到浏览器中。然后，您可以使用以下代码发送语音消息：</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">fastchat :(4437912：您想说什么</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">这将在您的计算机上打开一个浏览器，并在 Fastchat 中显示您输入的语音消息。</span></span><br><span class="line"><span class="string">问:</span></span><br></pre></td></tr></table></figure>

<p>\</p>
<ol start="2">
<li><h4 id="serve-controller-for-RESTful-API-Server"><a href="#serve-controller-for-RESTful-API-Server" class="headerlink" title="serve.controller for RESTful API Server"></a>serve.controller for RESTful API Server</h4></li>
</ol>
<p><strong>First Lunch a fastchat.serve.controller。</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># screen -S fs-glm-ctl</span></span><br><span class="line">python3 <span class="literal">-m</span> fastchat.serve.controller</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">(chatglm)longer@codeWL<span class="variable">$</span> python3 <span class="literal">-m</span> fastchat.serve.controller</span><br><span class="line"><span class="number">2023</span><span class="literal">-08-01</span> <span class="number">07</span>:<span class="number">15</span>:<span class="number">20</span> | INFO | controller | args: Namespace(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">21001</span>, dispatch_method=<span class="string">&#x27;shortest_queue&#x27;</span>)</span><br><span class="line"><span class="number">2023</span><span class="literal">-08-01</span> <span class="number">07</span>:<span class="number">15</span>:<span class="number">20</span> | ERROR | stderr | INFO:     Started server <span class="keyword">process</span> [<span class="number">18496</span>]</span><br><span class="line"><span class="number">2023</span><span class="literal">-08-01</span> <span class="number">07</span>:<span class="number">15</span>:<span class="number">20</span> | ERROR | stderr | INFO:     Waiting <span class="keyword">for</span> application startup.</span><br><span class="line"><span class="number">2023</span><span class="literal">-08-01</span> <span class="number">07</span>:<span class="number">15</span>:<span class="number">20</span> | ERROR | stderr | INFO:     Application startup complete.</span><br><span class="line"><span class="number">2023</span><span class="literal">-08-01</span> <span class="number">07</span>:<span class="number">15</span>:<span class="number">20</span> | ERROR | stderr | INFO:     Uvicorn running on http://localhost:<span class="number">21001</span> (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure>

<p><strong>Then, launch the model worker(s)</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  screen -S fs-glm-wkr</span></span><br><span class="line">python3 -m fastchat.serve.model_worker --model-path /mnt/models/chatglm2-6b</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>\</p>
<p><strong>Finally, launch the RESTful API server</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> screen -S fs-glm-api</span></span><br><span class="line">python3 -m fastchat.serve.openai_api_server --host localhost --port 8000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">localhost 建议使用局域网或者公网地址，这是对外的api接口</span></span><br></pre></td></tr></table></figure>

<p><br><code>Note</code>: 以上三个步骤都是必须按照步骤全部执行。可以使用screen session会话依次后台执行这些服务。\</p>
<p><strong>Launch the Gradio web server</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用fastchat gradio页面来查看加载的模型</span></span><br><span class="line"><span class="comment"># screen -S fs-glm-grd</span></span><br><span class="line">python3 -m fastchat.serve.gradio_web_server</span><br><span class="line"><span class="comment"># ... </span></span><br><span class="line"><span class="comment"># Running on local URL:  http://0.0.0.0:7860</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>Grade web Page：上面的model_worker只选择了一个，所以这里只显示已经加载的模型。如果要支持多个模型可以看下文的<strong>Running Mutiple</strong>，当然这个也需要显存支持。</p>
<h3 id="Test-APIs"><a href="#Test-APIs" class="headerlink" title="Test APIs"></a>Test APIs</h3><h4 id="Interact-with-mode（OpenAI方式）"><a href="#Interact-with-mode（OpenAI方式）" class="headerlink" title="Interact with mode（OpenAI方式）"></a>Interact with mode（OpenAI方式）</h4><blockquote>
<p><a class="link"   href="http://hostserver:8000/v1/" >http://hostserver:8000/v1/<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>运行 <code>chatglm.py</code> 脚本会得到如下的ResponseText</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">(chatai) <span class="built_in">PS</span> E:\TestGLM\src&gt; python chatglm.py</span><br><span class="line">你好，作为一名人工智能助手，我无法感受到情感，但我可以提供帮助。 请问有什么问题我可以解答吗？</span><br><span class="line">Hello! My name is Noxix. I am an AI chatbot designed to assist you with any questions or tasks you may have. How can I help you today?</span><br></pre></td></tr></table></figure>

<p><code>chatglm.py</code> 内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install --upgrade openai</span></span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="comment"># to get proper authentication, make sure to use a valid key that&#x27;s listed in</span></span><br><span class="line"><span class="comment"># the --api-keys flag. if no flag value is provided, the `api_key` will be ignored.</span></span><br><span class="line">openai.api_key = <span class="string">&quot;EMPTY&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;http://yourserverip:8000/v1&quot;</span></span><br><span class="line"></span><br><span class="line">model = <span class="string">&quot;chatglm2-6b&quot;</span>  <span class="comment"># 模型文件地址，文件夹名字</span></span><br><span class="line">prompt = <span class="string">&quot;你好&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create a completion</span></span><br><span class="line">completion = openai.Completion.create(model=model, prompt=prompt, max_tokens=<span class="number">64</span>)</span><br><span class="line"><span class="comment"># print the completion</span></span><br><span class="line"><span class="built_in">print</span>(prompt + completion.choices[<span class="number">0</span>].text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a chat completion</span></span><br><span class="line">completion = openai.ChatCompletion.create(</span><br><span class="line">  model=model,</span><br><span class="line">  messages=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Hello! What is your name?&quot;</span>&#125;]</span><br><span class="line">)</span><br><span class="line"><span class="comment"># print the completion</span></span><br><span class="line"><span class="built_in">print</span>(completion.choices[<span class="number">0</span>].message.content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################类似opena的代码##################################</span></span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">**args</span>):</span><br><span class="line">    openai.api_key = <span class="string">&quot;EMPTY&quot;</span></span><br><span class="line">    openai.api_base = <span class="string">&quot;http://hostserver:8000/v1&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = openai.ChatCompletion.create(**args)</span><br><span class="line">    <span class="keyword">except</span> openai.error.RateLimitError:</span><br><span class="line">        result = create(**args)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chat</span>(<span class="params">mess</span>):</span><br><span class="line">    responde = create(</span><br><span class="line">        model=<span class="string">&quot;chatglm2-6b&quot;</span>,</span><br><span class="line">        messages=mess</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    res = responde[<span class="string">&#x27;choices&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;message&#x27;</span>][<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h4 id="List-Models"><a href="#List-Models" class="headerlink" title="List Models"></a>List Models</h4><blockquote>
<p><a class="link"   href="http://hostserver:8000/v1/models" >http://hostserver:8000/v1/models<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>Using CMD <code>curl http://hostserver:8000/v1/models</code>， then</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// curl http://hostserver:8000/v1/models</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;list&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chatglm2-6b&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">1690876019</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fastchat&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chatglm2-6b&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;permission&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;modelperm-37FkwejmTx3qArXrHS5uSv&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model_permission&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">1690876019</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;allow_create_engine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;allow_sampling&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;allow_logprobs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;allow_search_indices&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;allow_view&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;allow_fine_tuning&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;organization&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;is_blocking&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Chat-Completions"><a href="#Chat-Completions" class="headerlink" title="Chat Completions"></a>Chat Completions</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8000/v1/chat/completions \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;    &quot;model&quot;: &quot;vicuna-7b-v1.3&quot;,    &quot;messages&quot;: [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello! What is your name?&quot;&#125;]  &#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="Text-Completions"><a href="#Text-Completions" class="headerlink" title="Text Completions"></a>Text Completions</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8000/v1/completions \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;    &quot;model&quot;: &quot;vicuna-7b-v1.3&quot;,    &quot;prompt&quot;: &quot;Once upon a time&quot;,    &quot;max_tokens&quot;: 41,    &quot;temperature&quot;: 0.5  &#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="Embeddings"><a href="#Embeddings" class="headerlink" title="Embeddings:"></a>Embeddings:</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8000/v1/embeddings \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;    &quot;model&quot;: &quot;vicuna-7b-v1.3&quot;,    &quot;input&quot;: &quot;Hello world!&quot;  &#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="Running-Multiple（TODO-TEST-多模型加载）"><a href="#Running-Multiple（TODO-TEST-多模型加载）" class="headerlink" title="Running Multiple（TODO TEST 多模型加载）"></a>Running Multiple（TODO TEST 多模型加载）</h3><p>If you want to run multiple models on the same machine and in the same process, you can replace the <code>model_worker</code> step above with a multi model variant:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># screen -r fs-glm-wkr</span></span><br><span class="line"></span><br><span class="line">python3 -m fastchat.serve.multi_model_worker \</span><br><span class="line">    --model-path /mnt/models/chatglm2-6b-ptune \</span><br><span class="line">    --model-names chatglm2-6b-ptune</span><br><span class="line">    --model-path /mnt/models/chatglm2-6b \</span><br><span class="line">    --model-names chatglm2-6b </span><br></pre></td></tr></table></figure>

<p><code>Note</code> 同时加载多个模型，设置模型名称路径即可，需要显存支持。这里尝试运行了两个ChatGLM以及微调ChatGLM, 显然24G的显存不支持同时运行两个。故之后的测试步骤暂不摘录。<br>接下来就愉快的使用openai去对接chatglm应用吧。</p>
]]></content>
      <categories>
        <category>LLMs</category>
      </categories>
      <tags>
        <tag>LLMs</tag>
      </tags>
  </entry>
  <entry>
    <title>ChatGLM-Using</title>
    <url>/longerking-blogs/2023/08/15/chatglm-using/</url>
    <content><![CDATA[<p>大语言模型使用</p>
<h1 id="ChatGLM-Using"><a href="#ChatGLM-Using" class="headerlink" title="ChatGLM-Using"></a>ChatGLM-Using</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从OpenAI ChatGPT爆火以来，开源界 AI界刮起了大模型之风。这些国产大模型，我们当然要体验起来。本文主要从代码层面记录了如何调用体验大模型，从一个调包工程师升级成为一个调用大模型模型工程师。:poop:</p>
<h2 id="ChatGLM2-6B"><a href="#ChatGLM2-6B" class="headerlink" title="ChatGLM2-6B"></a>ChatGLM2-6B</h2><p>ChatGLM2-6B是由清华THUDM实验室开源的中英双语对话模型 <a class="link"   href="https://github.com/THUDM/ChatGLM-6B" >ChatGLM-6B<i class="fas fa-external-link-alt"></i></a> 的第二代版，本基于 <a class="link"   href="https://github.com/THUDM/GLM" >General Language Model (GLM)<i class="fas fa-external-link-alt"></i></a> 架构，具有 62 亿参数。结合模型量化技术，用户可以在消费级的显卡上进行本地部署（INT4 量化级别下最低只需 6GB 显存）。 ChatGLM-6B 使用了和 ChatGPT 相似的技术，针对中文问答和对话进行了优化。经过约 1T 标识符的中英双语训练，辅以监督微调、反馈自助、人类反馈强化学习等技术的加持，62 亿参数的 ChatGLM-6B 已经能生成相当符合人类偏好的回答。</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<ol>
<li><a class="link"   href="https://github.com/THUDM/ChatGLM2-6B" >https://github.com/THUDM/ChatGLM2-6B<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://huggingface.co/THUDM/chatglm2-6b" >https://huggingface.co/THUDM/chatglm2-6b<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://huggingface.co/THUDM/chatglm-6b-int4" >https://huggingface.co/THUDM/chatglm-6b-int4<i class="fas fa-external-link-alt"></i></a></li>
</ol>
</blockquote>
<h3 id="HardWare-Requirements"><a href="#HardWare-Requirements" class="headerlink" title="HardWare Requirements"></a>HardWare Requirements</h3><table><thead><tr><th width="149.33333333333331">量化等级</th><th width="277">编码 2048 长度的最小显存</th><th>生成 8192 长度的最小显存</th></tr></thead><tbody><tr><td>FP16 / BF16</td><td>13.1 GB</td><td>12.8 GB</td></tr><tr><td>INT8</td><td>8.2 GB</td><td>8.1 GB</td></tr><tr><td>INT4</td><td>5.5 GB</td><td>5.1 GB</td></tr></tbody></table>

<p>这里受限于资源，我们以量化INT4的模型测试，同时INT4根据官网介绍支持CPU。</p>
<h3 id="DownLoad-Models"><a href="#DownLoad-Models" class="headerlink" title="DownLoad Models"></a>DownLoad Models</h3><p>这里直接下载Hugging Face(HF)上的int量化后的模型。HF是一个托管发布分享模型数据集的开源平台。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">支持大文件下载</span></span><br><span class="line">git lfs install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载模型，约7GB，下载比较耗时</span></span><br><span class="line">git clone --depth 1 https://huggingface.co/THUDM/chatglm-6b-int4</span><br></pre></td></tr></table></figure>

<p>安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖，依赖源自ChatGLM2-6B-int4 HF readme</span></span><br><span class="line">pip install protobuf transformers==4.30.2 cpm_kernels torch==2.0.1 gradio mdtex2html sentencepiece accelerate</span><br></pre></td></tr></table></figure>

<h3 id="Test-ChatGLM2"><a href="#Test-ChatGLM2" class="headerlink" title="Test ChatGLM2"></a>Test ChatGLM2</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModel</span><br><span class="line"><span class="comment"># 这里将THUDM/chatglm2-6b-int4 更换为刚模型下载存放的路径，</span></span><br><span class="line"><span class="comment"># 否则会自动去重新下载模型到~/.cache/目录下</span></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(<span class="string">&quot;THUDM/chatglm2-6b-int4&quot;</span>, trust_remote_code=<span class="literal">True</span>)</span><br><span class="line">model = AutoModel.from_pretrained(<span class="string">&quot;THUDM/chatglm2-6b-int4&quot;</span>, trust_remote_code=<span class="literal">True</span>).half().cuda()</span><br><span class="line">model = model.<span class="built_in">eval</span>()</span><br><span class="line">response, history = model.chat(tokenizer, <span class="string">&quot;你好&quot;</span>, history=[])</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"></span><br><span class="line">t = time.time()</span><br><span class="line">response, history = model.chat(tokenizer, <span class="string">&quot;晚上睡不着应该怎么办&quot;</span>, history=history)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;coast:<span class="subst">&#123;time.time() - t:<span class="number">.4</span>f&#125;</span>s&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你好👋！我是人工智能助手 ChatGLM2-6B，很高兴见到你，欢迎问我任何问题。</span><br><span class="line">睡眠对身体健康和心理健康非常重要。如果晚上睡不着，可以尝试以下一些方法:</span><br><span class="line"></span><br><span class="line">1. 放松自己:在睡觉前数绵羊或做一些轻松的伸展运动，可以帮助放松自己。也可以尝试使用温和的瑜伽或伸展练习，缓解身体的紧张。</span><br><span class="line"></span><br><span class="line">2. 创建一个舒适的睡眠环境:确保卧室安静、黑暗、凉爽和舒适。如果卧室中存在噪音或强光，可以考虑使用耳塞或眼罩。</span><br><span class="line"></span><br><span class="line">3. 避免使用电子产品:在睡觉前一小时避免使用电子产品，如手机、电视或电脑。这些设备发出的蓝光会影响睡眠质量。</span><br><span class="line"></span><br><span class="line">4. 建立一个固定的睡眠时间表:保持固定的睡眠时间表可以帮助身体建立一个正常的睡眠节律。尽量在每天相同的时间上床和起床。</span><br><span class="line"></span><br><span class="line">5. 避免饮用刺激性饮料:在睡觉前几小时避免饮用咖啡、茶、酒或含有巧克力等刺激性饮料。</span><br><span class="line"></span><br><span class="line">如果这些方法无效，可以考虑咨询医生以了解可能的原因。</span><br><span class="line">coast:12.4483s</span><br></pre></td></tr></table></figure>

<p>这样我们就使用官方的样例代码简单的使用ChatGLM进行推理对话了。接下来让我们可以简单的封装一下，更优美地使用ChatGLM2！</p>
<h2 id="FastAPI-Deploy-ChatGLM2"><a href="#FastAPI-Deploy-ChatGLM2" class="headerlink" title="FastAPI Deploy ChatGLM2"></a>FastAPI Deploy ChatGLM2</h2><p>上面我们已经学会了下载模型，然后进行简单的模型对话推理。接下来使用我们使用FastAPI可以将模型部署到服务器上，以接口方式进行对话。注意这里的API仅仅是简单封装，不同于FastChat类OpenAPI提供的接口。</p>
<blockquote>
<p>FastAPI: <a class="link"   href="https://fastapi.tiangolo.com/" >https://fastapi.tiangolo.com/<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>以下代码已经不太规范，只是一个流式调用ChatGLM2 API的方式，建议使用ChatGLM2官方提供的样例代码部署测试，或者式后文的FastChat方式！</p>
<blockquote>
<p>ChatGLM2-6B: <a class="link"   href="https://github.com/THUDM/ChatGLM2-6B" >https://github.com/THUDM/ChatGLM2-6B<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://github.com/THUDM/ChatGLM2-6B/blob/main/openai_api.py" >https://github.com/THUDM/ChatGLM2-6B/blob/main/openai_api.py<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">File Name:chatglm2-6b-stream-api.py</span></span><br><span class="line"><span class="string">Author:LongerKing</span></span><br><span class="line"><span class="string">Time:2023/8/15 13:33</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModel</span><br><span class="line"><span class="keyword">from</span> fastapi.middleware.cors <span class="keyword">import</span> CORSMiddleware</span><br><span class="line"><span class="keyword">from</span> sse_starlette.sse <span class="keyword">import</span> ServerSentEvent, EventSourceResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLogger</span>(<span class="params">name, file_name, use_formatter=<span class="literal">True</span></span>):</span><br><span class="line">    logger = logging.getLogger(name)</span><br><span class="line">    logger.setLevel(logging.INFO)</span><br><span class="line">    console_handler = logging.StreamHandler(sys.stdout)</span><br><span class="line">    formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s    %(message)s&#x27;</span>)</span><br><span class="line">    console_handler.setFormatter(formatter)</span><br><span class="line">    console_handler.setLevel(logging.INFO)</span><br><span class="line">    logger.addHandler(console_handler)</span><br><span class="line">    <span class="keyword">if</span> file_name:</span><br><span class="line">        handler = logging.FileHandler(file_name, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        handler.setLevel(logging.INFO)</span><br><span class="line">        <span class="keyword">if</span> use_formatter:</span><br><span class="line">            formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(message)s&#x27;</span>)</span><br><span class="line">            handler.setFormatter(formatter)</span><br><span class="line">        logger.addHandler(handler)</span><br><span class="line">    <span class="keyword">return</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger = getLogger(<span class="string">&#x27;ChatGLM&#x27;</span>, <span class="string">&#x27;chatlog.log&#x27;</span>)</span><br><span class="line"></span><br><span class="line">MAX_HISTORY = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatGLM</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        logger.info(<span class="string">&quot;Start initialize model...&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.tokenizer = AutoTokenizer.from_pretrained(</span><br><span class="line">            <span class="string">&quot;/home/bigdata/wonders/wanglang/models/chatglm2-6b-cmeee_eie001&quot;</span>, trust_remote_code=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.model = AutoModel.from_pretrained(<span class="string">&quot;/home/bigdata/wonders/wanglang/models/chatglm2-6b-cmeee_eie001&quot;</span>,</span><br><span class="line">                                               trust_remote_code=<span class="literal">True</span>).quantize(<span class="number">8</span>).cuda()</span><br><span class="line">        <span class="variable language_">self</span>.model.<span class="built_in">eval</span>()</span><br><span class="line">        logger.info(<span class="string">&quot;Model initialization finished.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">            <span class="keyword">with</span> torch.cuda.device(<span class="string">f&quot;cuda:<span class="subst">&#123;args.device&#125;</span>&quot;</span>):</span><br><span class="line">                torch.cuda.empty_cache()</span><br><span class="line">                torch.cuda.ipc_collect()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">answer</span>(<span class="params">self, query: <span class="built_in">str</span>, history</span>):</span><br><span class="line">        response, history = <span class="variable language_">self</span>.model.chat(<span class="variable language_">self</span>.tokenizer, query, history=history)</span><br><span class="line">        history = [<span class="built_in">list</span>(h) <span class="keyword">for</span> h <span class="keyword">in</span> history]</span><br><span class="line">        <span class="keyword">return</span> response, history</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">self, query, history</span>):</span><br><span class="line">        <span class="keyword">if</span> query <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> history <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> &#123;<span class="string">&quot;query&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;response&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;history&quot;</span>: [], <span class="string">&quot;finished&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">        size = <span class="number">0</span></span><br><span class="line">        response = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> response, history <span class="keyword">in</span> <span class="variable language_">self</span>.model.stream_chat(<span class="variable language_">self</span>.tokenizer, query, history):</span><br><span class="line">            this_response = response[size:]</span><br><span class="line">            history = [<span class="built_in">list</span>(h) <span class="keyword">for</span> h <span class="keyword">in</span> history]</span><br><span class="line">            size = <span class="built_in">len</span>(response)</span><br><span class="line">            <span class="keyword">yield</span> &#123;<span class="string">&quot;delta&quot;</span>: this_response, <span class="string">&quot;response&quot;</span>: response, <span class="string">&quot;finished&quot;</span>: <span class="literal">False</span>&#125;</span><br><span class="line">        logger.info(<span class="string">&quot;Answer - &#123;&#125;&quot;</span>.<span class="built_in">format</span>(response))</span><br><span class="line">        <span class="keyword">yield</span> &#123;<span class="string">&quot;query&quot;</span>: query, <span class="string">&quot;delta&quot;</span>: <span class="string">&quot;[EOS]&quot;</span>, <span class="string">&quot;response&quot;</span>: response, <span class="string">&quot;history&quot;</span>: history, <span class="string">&quot;finished&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_server</span>(<span class="params">http_address: <span class="built_in">str</span>, port: <span class="built_in">int</span>, gpu_id: <span class="built_in">str</span></span>):</span><br><span class="line">    os.environ[<span class="string">&#x27;CUDA_DEVICE_ORDER&#x27;</span>] = <span class="string">&#x27;PCI_BUS_ID&#x27;</span></span><br><span class="line">    os.environ[<span class="string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = gpu_id</span><br><span class="line"></span><br><span class="line">    bot = ChatGLM()</span><br><span class="line"></span><br><span class="line">    app = FastAPI()</span><br><span class="line">    app.add_middleware(CORSMiddleware,</span><br><span class="line">                       allow_origins=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">                       allow_credentials=<span class="literal">True</span>,</span><br><span class="line">                       allow_methods=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">                       allow_headers=[<span class="string">&quot;*&quot;</span>]</span><br><span class="line">                       )</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;started&#x27;</span>, <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.post(<span class="params"><span class="string">&quot;/chat&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">answer_question</span>(<span class="params">arg_dict: <span class="built_in">dict</span></span>):</span><br><span class="line">        result = &#123;<span class="string">&quot;query&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;response&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>&#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            text = arg_dict[<span class="string">&quot;query&quot;</span>]</span><br><span class="line">            ori_history = arg_dict[<span class="string">&quot;history&quot;</span>]</span><br><span class="line">            logger.info(<span class="string">&quot;Query - &#123;&#125;&quot;</span>.<span class="built_in">format</span>(text))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(ori_history) &gt; <span class="number">0</span>:</span><br><span class="line">                logger.info(<span class="string">&quot;History - &#123;&#125;&quot;</span>.<span class="built_in">format</span>(ori_history))</span><br><span class="line">            history = ori_history[-MAX_HISTORY:]</span><br><span class="line">            history = [<span class="built_in">tuple</span>(h) <span class="keyword">for</span> h <span class="keyword">in</span> history]</span><br><span class="line">            response, history = bot.answer(text, history)</span><br><span class="line">            logger.info(<span class="string">&quot;Answer - &#123;&#125;&quot;</span>.<span class="built_in">format</span>(response))</span><br><span class="line">            ori_history.append((text, response))</span><br><span class="line">            result = &#123;<span class="string">&quot;query&quot;</span>: text, <span class="string">&quot;response&quot;</span>: response,</span><br><span class="line">                      <span class="string">&quot;history&quot;</span>: ori_history, <span class="string">&quot;success&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&quot;error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.post(<span class="params"><span class="string">&quot;/stream&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">answer_question_stream</span>(<span class="params">arg_dict: <span class="built_in">dict</span></span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decorate</span>(<span class="params">generator</span>):</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> generator:</span><br><span class="line">                <span class="keyword">yield</span> ServerSentEvent(json.dumps(item, ensure_ascii=<span class="literal">False</span>), event=<span class="string">&#x27;delta&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            text = arg_dict[<span class="string">&quot;query&quot;</span>]</span><br><span class="line">            ori_history = arg_dict[<span class="string">&quot;history&quot;</span>]</span><br><span class="line">            logger.info(<span class="string">&quot;Query - &#123;&#125;&quot;</span>.<span class="built_in">format</span>(text))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(ori_history) &gt; <span class="number">0</span>:</span><br><span class="line">                logger.info(<span class="string">&quot;History - &#123;&#125;&quot;</span>.<span class="built_in">format</span>(ori_history))</span><br><span class="line">            history = ori_history[-MAX_HISTORY:]</span><br><span class="line">            history = [<span class="built_in">tuple</span>(h) <span class="keyword">for</span> h <span class="keyword">in</span> history]</span><br><span class="line">            <span class="keyword">return</span> EventSourceResponse(decorate(bot.stream(text, history)))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&quot;error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> EventSourceResponse(decorate(bot.stream(<span class="literal">None</span>, <span class="literal">None</span>)))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.get(<span class="params"><span class="string">&quot;/free_gc&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">free_gpu_cache</span>():</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bot.clear()</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;success&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&quot;error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;success&quot;</span>: <span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;starting server...&quot;</span>)</span><br><span class="line">    uvicorn.run(app=app, host=http_address, port=port, workers=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;Stream API Service for ChatGLM2-6B&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--device&#x27;</span>, <span class="string">&#x27;-d&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;device，-1 means cpu, other means gpu ids&#x27;</span>, default=<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--host&#x27;</span>, <span class="string">&#x27;-H&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;host to listen&#x27;</span>, default=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--port&#x27;</span>, <span class="string">&#x27;-P&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;port of this service&#x27;</span>, default=<span class="number">8000</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    start_server(args.host, <span class="built_in">int</span>(args.port), args.device)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LLMs</category>
      </categories>
      <tags>
        <tag>LLMs</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/longerking-blogs/2022/10/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>My Site GitHub Pages Starter</title>
    <url>/longerking-blogs/2023/07/16/my-site-starter/</url>
    <content><![CDATA[<h1 id="GitHub-Page-Starter"><a href="#GitHub-Page-Starter" class="headerlink" title="GitHub Page Starter"></a>GitHub Page Starter</h1><h2 id="1-Github-Pages"><a href="#1-Github-Pages" class="headerlink" title="1. Github Pages"></a>1. Github Pages</h2><p>References：<a class="link"   href="https://pages.github.com/" >GitHub Pages | Websites for you and your projects, hosted directly from your GitHub repository. Just edit, push, and your changes are live.<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="2-Hexo-Blogs"><a href="#2-Hexo-Blogs" class="headerlink" title="2. Hexo Blogs"></a>2. Hexo Blogs</h2><p>References:   </p>
<ol>
<li><p><a class="link"   href="https://zhuanlan.zhihu.com/p/26625249" >GitHub+Hexo 搭建个人网站详细教程 - 知乎 (zhihu.com)<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p><a class="link"   href="https://hexo.io/zh-cn/" >Hexo<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ol>
<p>首先创建一个基于Hexo-markdown的my-blogs博客项目，注意这个并不是github.io.仓库。</p>
<p>Note: 注意这里也可以下载由KeepTheme提供的模板工程代替my-blogs项目：<a class="link"   href="https://keep-docs.xpoet.cn/tutorial/get-start/quick-starter.html" >Keep 主题快速启动模板 | Keep 主题使用指南 (xpoet.cn)<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init my-blogs</span><br><span class="line">cd my-blogs</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建议采用下载模板的方式</span></span><br><span class="line">mv hexo-theme-keep-starter-main my-blogs</span><br><span class="line">cd my-blogs</span><br><span class="line">git init</span><br><span class="line">git branch -M main</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="3-Hexo-theme"><a href="#3-Hexo-theme" class="headerlink" title="3. Hexo theme"></a>3. Hexo theme</h2><blockquote>
<p>Reference</p>
<ol>
<li><p><a class="link"   href="https://hexo.io/themes/" >Themes | Hexo<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p><a class="link"   href="https://keep-docs.xpoet.cn/" >Keep 主题使用指南 | Hexo 主题 Keep 官方文档 (xpoet.cn)<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ol>
</blockquote>
<h2 id="4-manually-push-to-GitHub-io-pages"><a href="#4-manually-push-to-GitHub-io-pages" class="headerlink" title="4. manually push to GitHub io pages"></a>4. manually push to GitHub io pages</h2><p>GitHub: create empty repository  username.github.io</p>
<p>Install plugin <code>hexo-deployer-git</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>找到<code>_config.yml</code>文件，找到<code>deploy</code>，按照以下格式进行修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意先给Github配置本机的ssh-key 才能部署到Github</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com:你的用户名/你的用户名.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p>手动构建项目生成静态页面和部署到GitHub</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean  # 清除缓存</span><br><span class="line">hexo g      # 生成静态网页</span><br><span class="line">hexo d      # 部署到Github</span><br></pre></td></tr></table></figure>

<h2 id="5-Suggest-Auto-push-to-GitHub-pages-by-GitHub-Actions"><a href="#5-Suggest-Auto-push-to-GitHub-pages-by-GitHub-Actions" class="headerlink" title="5. Suggest Auto push to GitHub pages by GitHub Actions"></a>5. Suggest Auto push to GitHub pages by GitHub Actions</h2><p>使用这个代替上面的手动发布，私有源码库创建到my-blogs，公开库创建到username.github.io。</p>
<p>参照下面的链接文档</p>
<blockquote>
<p><a class="link"   href="https://juejin.cn/post/6943895271751286821" >如何使用 GitHub Actions 自动部署 Hexo 博客 - 掘金 (juejin.cn)<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="6-create-a-menu-page"><a href="#6-create-a-menu-page" class="headerlink" title="6.create a menu page"></a>6.create a menu page</h2><p>update keep.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  Home: /</span><br><span class="line">  Archives: /archives</span><br><span class="line">  Tags: /tags</span><br><span class="line">  Categories: /categories</span><br><span class="line">  # Links: /links</span><br><span class="line">  About: /about</span><br><span class="line">  # Changelog: /changelog</span><br><span class="line">  # ......</span><br></pre></td></tr></table></figure>

<p>create menu about page and edit about</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>create new page</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new my-site-starter</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>进程间通信-共享内存</title>
    <url>/longerking-blogs/2024/09/19/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<h2 id="为什么使用共享内存"><a href="#为什么使用共享内存" class="headerlink" title="为什么使用共享内存"></a>为什么使用共享内存</h2><p>共享内存（Shared Memory）是操作系统提供的一种机制，允许多个进程或者现成访问同一块<strong>内存空间</strong>，这样可以快速的交换数据和消息。</p>
<p>使用共享内存的原因主要包括以下几点：</p>
<ol>
<li><strong>高性能的数据交换</strong>：共享内存通常比其他通信机制（如管道、消息队列、Socket等）更快，因为它减少了数据复制的次数。在共享内存中，数据只需写入一次，可以被多个进程直接访问。</li>
<li><strong>同步机制</strong>：共享内存通常与同步原语（如互斥锁、信号量等）结合使用，以控制多个进程或线程对共享数据的访问，保证数据的一致性和完整性。</li>
<li><strong>方便的数据共享</strong>：在多进程或多线程应用中，共享内存提供了一种简单的方式来共享大量数据，无需通过繁琐的数据传递过程。</li>
<li><strong>减少资源消耗</strong>：使用共享内存可以减少系统资源的使用，因为它不需要像其他通信机制那样进行数据的多次复制。</li>
</ol>
<p>在嵌入式系统中，使用共享内存的原因与在通用计算环境中使用共享内存的原因类似，但也具有一些特定的考虑因素。以下是在嵌入式系统中使用共享内存的几个主要原因：</p>
<ol>
<li><strong>资源限制</strong>：嵌入式系统通常具有有限的资源，包括内存、处理能力和功耗。共享内存可以减少内存占用，因为它允许多个组件或任务共享相同的数据，而不需要为每个组件或任务复制数据。</li>
<li><strong>性能要求</strong>：嵌入式系统经常需要在严格的实时性能要求下运行。共享内存提供了快速的通信机制，可以减少数据传输延迟，这对于满足实时性要求至关重要。</li>
<li><strong>低功耗</strong>：通过减少数据传输和复制，共享内存有助于降低功耗，这对于电池供电的嵌入式设备来说尤为重要。</li>
<li><strong>简化设计</strong>：共享内存可以简化系统设计，因为它减少了需要管理的通信接口数量。这对于减少硬件复杂性和降低成本非常有用。</li>
<li><strong>通信效率</strong>：在多处理器或多核嵌入式系统中，共享内存可以提供高效的处理器间通信，这对于并行处理和任务分配非常重要。</li>
</ol>
<pre class="mermaid">graph LR
	进程A <--> 共享内存 <--> 进程B
	进程C <--> 共享内存 <--> 进程...</pre>



<h2 id="共享内存的应用"><a href="#共享内存的应用" class="headerlink" title="共享内存的应用"></a>共享内存的应用</h2><p>共享内存函数由shmget、shmat、shmdt、shmctl四个函数组成。</p>
<h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><p>shmget(得到一个共享内存标识符或创建一个共享内存对象)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把从pathname(已存在的路径)导出的信息与id的低序8位组合成生成一个唯一的整数IPC键，用户进程间通信</span></span><br><span class="line"><span class="comment"> * __pathname: 指定的文件，此文件必须存在且可存取</span></span><br><span class="line"><span class="comment"> * __proj_id:  计划代号（project ID），这里可以表示为指定共享内存变量的Id，（0-255）</span></span><br><span class="line"><span class="comment"> * key_t一般为32位的int型的IPC键</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">key_t</span> <span class="title function_">ftok</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *__pathname, <span class="type">int</span> __proj_id)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 得到一个共享内存标识符或创建一个共享内存对象并返回共享内存标识符</span></span><br><span class="line"><span class="comment">* key:  0(IPC_PRIVATE)：会建立新共享内存对象</span></span><br><span class="line"><span class="comment">*       大于0的32位整数：视参数shmflg来确定操作。通常要求此值来源于ftok返回的IPC键值</span></span><br><span class="line"><span class="comment">* size: 大于0的整数：新建的共享内存大小，以字节为单位, </span></span><br><span class="line"><span class="comment">* 		0：只获取共享内存时指定为0</span></span><br><span class="line"><span class="comment">* shmflg: 0：取共享内存标识符，若不存在则函数会报错</span></span><br><span class="line"><span class="comment">* 		  IPC_CREAT：当shmflg&amp;IPC_CREAT为真时，如果内核中不存在键值与key相等的共享内存，则新建一个共享内存；如果存在这样的共享内存，返回此共享内存的标识符</span></span><br><span class="line"><span class="comment">* 		  IPC_CREAT|IPC_EXCL：如果内核中不存在键值与key相等的共享内存，则新建一个消息队列；如果存在这样的共享内存则报错</span></span><br><span class="line"><span class="comment">*         shmflg参数为模式标志参数，使用时需要与IPC对象存取权限（如0600）进行|运算来确定信号量集的存取权限</span></span><br><span class="line"><span class="comment">* return 成功：返回共享内存的标识符 出错：-1，错误原因存于error中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">shmget</span><span class="params">(<span class="type">key_t</span> key, <span class="type">size_t</span> size, <span class="type">int</span> shmflg)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 连接共享内存, 连接共享内存标识符为shmid的共享内存，连接成功后把共享内存区对象映射到调用进程的地址空间，随后可像本地空间一样访问</span></span><br><span class="line"><span class="comment">* __shmid: 共享内存标识符</span></span><br><span class="line"><span class="comment">* *__shmaddr: 指定共享内存出现在进程内存地址的什么位置，直接指定为NULL让内核自己决定一个合适的地址位置</span></span><br><span class="line"><span class="comment">* shmflg: SHM_RDONLY：为只读模式  </span></span><br><span class="line"><span class="comment">* 		  0: 表示默认行为，读写权限</span></span><br><span class="line"><span class="comment">*         SHM_RND: 如果设置了此标识，并且shmaddr部位NULL，共享内存附加地址会向下舍入到SHMLBA中</span></span><br><span class="line"><span class="comment">* return 成功 返回 共享内存段附加在进程地址空间的地址，即进程中使用的共享变量地址</span></span><br><span class="line"><span class="comment">*        失败 返回 (void *)-1 ，并设置errno错误值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">shmat</span><span class="params">(<span class="type">int</span> __shmid, <span class="type">const</span> <span class="type">void</span> *__shmaddr, <span class="type">int</span> __shmflg)</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 断开共享内存连接</span></span><br><span class="line"><span class="comment">* __shmaddr: 连接的共享内存的起始地址, 进程内部访问的共享内存变量地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">shmdt</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *__shmaddr)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 共享内存管理，共享内存的控制， 如删除重置等。没有执行，则共享内存最后状态会保留在内存中，即使程序结束了，也会保存。</span></span><br><span class="line"><span class="comment">* 不常用，应为多个进程中，这里删除了，其他进程无法访问了。可以通过IPC_STAT来判断最后一次附加shmat共享内存的时间,以及断开分离</span></span><br><span class="line"><span class="comment">* shmdt共享内存的时间来判断是否删除等。以及获取有多少个进程操作共享内存。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* shmid:</span></span><br><span class="line"><span class="comment">* cmd: IPC_STAT：得到共享内存的状态，把共享内存的shmid_ds结构复制到buf中</span></span><br><span class="line"><span class="comment">* cmd: IPC_SET：改变共享内存的状态，把buf所指的shmid_ds结构中的uid、gid、mode复制到共享内存的shmid_ds结构内</span></span><br><span class="line"><span class="comment">* cmd: IPC_RMID：删除这片共享内存</span></span><br><span class="line"><span class="comment">* buf: 共享内存管理结构体。具体说明参见共享内存内核结构定义部分</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">shmctl</span><span class="params">(<span class="type">int</span> shmid, <span class="type">int</span> cmd, <span class="keyword">struct</span> shmid_ds *buf)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>创建两个C程序，process_a.c  和 process_b.c。  两个程序访问同一个内存变量，使用ftok操作同一个可访问的pathname文件路径和同一个proj_id标识， 可以使用不同的pathname和不同的proj_id来标识不同的文件索引节点上的不同IPC标识。<br>其中process_a程序，更新写入 IPC shmKey为(process_a, 65)的内存变量，而process_b程序，读取shmKey同样为(process_a, 65)的内存变量。</p>
<p>process_a.c 文件，编译gcc .&#x2F;process_a.c -o process_a</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * process_a 文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;error.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHM_SIZE 1024  <span class="comment">// 定义共享内存大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">key_t</span> key = ftok(<span class="string">&quot;process_a&quot;</span>, <span class="number">65</span>);  <span class="comment">// 创建一个唯一的键  proj_id 范围 （0-256)  低8位 组合为IPC键值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// key_t key = ftok(&quot;process_a&quot;, 257);  // 创建一个唯一的键   257 = 0x101  1=0x01    ，  等价于 &lt;==&gt;  key_t shmKey = ftok(&quot;process_a&quot;, 1);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shmid = shmget(key, SHM_SIZE, IPC_CREAT|<span class="number">0600</span>);   <span class="comment">// 创建共享内存, 内存长度为SHM_SIZE</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (shmid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;shmget error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *shm_value1 = (<span class="type">char</span> *) shmat(shmid, <span class="literal">NULL</span>, <span class="number">0</span>); <span class="comment">// 连接共享内存   char 类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// int *shm_value2 = (int *) shmat(shmid, (void*)0, 0); // 连接共享内存 int 类型   void*指针，可以任意转换类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">10</span>)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;process_a now set shm_value1 to [shm_value1=%d]\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">sprintf</span>(shm_value1, <span class="string">&quot;shm_value1=%d&quot;</span>, i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// *shm_value2 = 10*i;   // int类型的直接赋值即可，不需要使用sprintf进行拷贝</span></span><br><span class="line">        i++;</span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开共享内存连接</span></span><br><span class="line">    shmdt(shm_value1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>process_b.c 文件  编译 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * process_b 文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;error.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHM_SIZE 1024  <span class="comment">// 定义共享内存大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 需要和process_a中，是同样的pathname 和 proj_id ,才能访问到同一个__pathname, 和 proj_id标识的内存变量内存变量</span></span><br><span class="line"></span><br><span class="line">    <span class="type">key_t</span> shmKey = ftok(<span class="string">&quot;process_a&quot;</span>, <span class="number">65</span>);  <span class="comment">// 创建一个唯一的键  65</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// key_t shmKey = ftok(&quot;process_a&quot;, 1);  // 创建一个唯一的键  1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == shmKey) &#123;</span><br><span class="line">        perror(<span class="string">&quot;获取65的shmKey异常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shmid = shmget(shmKey, SHM_SIZE, IPC_CREAT|<span class="number">0600</span>);   <span class="comment">// 创建共享内存, 内存长度为SHM_SIZE</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (shmid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;shmget error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *shm_value1 = (<span class="type">char</span> *) shmat(shmid, <span class="literal">NULL</span>, <span class="number">0</span>); <span class="comment">// 连接共享内存   char 类型</span></span><br><span class="line">    <span class="comment">// char *shm_value1 = (char *) shmat(shmid, NULL, SHM_RDONLY); // 连接共享内存   char 类型  SHM_RDONLY 只读连接，无法修改</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// int *shm_value1 = (int *) shmat(shmid, (void*)0, 0); // 连接共享内存 int 类型   void*指针，可以任意转换类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果没有进行上面的定义</span></span><br><span class="line">        <span class="comment">// sprintf(shm_value1, &quot;new set shm_value1 to %d&quot;, i);</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;process_b read: %s\n&quot;</span>, shm_value1);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开共享内存连接</span></span><br><span class="line">    shmdt(shm_value1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>开两个终端分别运行两个程序，两个程序都谁先运行都可以，因为都使用了ftok和shmget创建了指定的共享内存，不会重复创建。</p>
<p>运行process_a，写入共享内存，3秒更新写一次；运行process_b，读取共享内存，1秒读一次</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keyinwang@WondersWL:~/Projects/DemoC/shared_mem$ ./process_a </span><br><span class="line">process_a now set shm_value1 to [shm_value1=0]</span><br><span class="line">process_a now set shm_value1 to [shm_value1=1]</span><br><span class="line">process_a now set shm_value1 to [shm_value1=2]</span><br><span class="line">process_a now set shm_value1 to [shm_value1=3]</span><br><span class="line">process_a now set shm_value1 to [shm_value1=4]</span><br><span class="line">process_a now set shm_value1 to [shm_value1=5]</span><br><span class="line"></span><br><span class="line">// ......</span><br><span class="line">keyinwang@WondersWL:~/Projects/DemoC/shared_mem$ ./process_b </span><br><span class="line">process_b read: shm_value1=1</span><br><span class="line">process_b read: shm_value1=1</span><br><span class="line">process_b read: shm_value1=2</span><br><span class="line">process_b read: shm_value1=2</span><br><span class="line">process_b read: shm_value1=2</span><br><span class="line">process_b read: shm_value1=3</span><br></pre></td></tr></table></figure>



<p>注意当process_a中途结束或者结束运行时，再次运行process_b时，发现共享内存是最后改动的值，而不是空值，说明即使程序结束运行，而共享内存依然存在，这是因为我们没有使用shmctl删除共享内存。因此就一直保留在内存指定地址中。</p>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>为了提供共享内存的可读性和复用性，我们可以将pathname节点和proj_id 抽象提取出来表示不通的共享内存变量，并可以设置不通变量的指定shmSize。</p>
<p>如可以定义一个头文件shm_util.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// shm_util.h 定义各个进程之前的共享内存参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * shm_device_status:  运行状态  int *shm_device_status</span></span><br><span class="line"><span class="comment"> * 0：已开机</span></span><br><span class="line"><span class="comment"> * 1：开机中</span></span><br><span class="line"><span class="comment"> * 2：开机成功</span></span><br><span class="line"><span class="comment"> * 3：关机中</span></span><br><span class="line"><span class="comment"> * 4：重启中</span></span><br><span class="line"><span class="comment"> * 5：升级中</span></span><br><span class="line"><span class="comment"> * -1：运行出错 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHMID_DEVICE_STATUS 1    <span class="comment">// proj_id = 1表示  device_status 的内存变量shm_device_status，定义值保存了int类型的，用来表示设备不通时期的状态，需要共享给其他程序。</span></span></span><br><span class="line"><span class="comment">/**定义status共享内存长度 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHMSIZE_STATUS 8    <span class="comment">// 这里定义 shmsize_status </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** pathname */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHMPATHNAME_PROCESS <span class="string">&quot;/home/keyinwang/Projects/DemoC/shared_mem/process_c&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * shm_battery_voltage:  电池电压  char *shm_device_status</span></span><br><span class="line"><span class="comment"> * float 转 chat []   如 5.000   4.890    单位V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHMID_BATTERY_VOLTAGE 2</span></span><br><span class="line"><span class="comment">/**定义status共享内存长度 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHMSIZE_VOL 6    <span class="comment">// 这里定义 shmsize_vol</span></span></span><br></pre></td></tr></table></figure>

<p>共享内存写进程process_c.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * process_c 文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;error.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**引入公共定义好的共享变量参数 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;shm_util.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 第一个共享变量</span></span><br><span class="line">    <span class="type">key_t</span> shmKey = ftok(SHMPATHNAME_PROCESS, SHMID_DEVICE_STATUS);  <span class="comment">// 创建一个唯一的键</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == shmKey) &#123;</span><br><span class="line">        perror(<span class="string">&quot;获取 SHMPATHNAME_PROCESS  SHMID_DEVICE_STATUS 的shmKey异常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> shmid = shmget(shmKey, SHMSIZE_STATUS, IPC_CREAT|<span class="number">0600</span>);   <span class="comment">// 创建共享内存, 内存长度为SHM_SIZE</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (shmid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;shmget SHMID_DEVICE_STATUS error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> *shm_device_status = (<span class="type">int</span> *) shmat(shmid, (<span class="type">void</span>*)<span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 连接共享内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二个共享变量</span></span><br><span class="line">    shmKey = ftok(SHMPATHNAME_PROCESS, SHMID_BATTERY_VOLTAGE);  <span class="comment">// 创建一个唯一的键</span></span><br><span class="line">    shmid = shmget(shmKey, SHMSIZE_VOL, IPC_CREAT|<span class="number">0600</span>);   <span class="comment">// 创建共享内存, 内存长度为SHMSHZI_VOL</span></span><br><span class="line">    <span class="keyword">if</span> (shmid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;shmget SHM_BATTERY_VOLTAGE error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> *shm_battery_voltage = (<span class="type">char</span> *) shmat(shmid, <span class="literal">NULL</span>, <span class="number">0</span>); <span class="comment">// 连接共享内存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">10</span>)</span><br><span class="line">    &#123;   </span><br><span class="line">        *shm_device_status = i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;set int *shm_device_status=%d\n&quot;</span>, *shm_device_status);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(shm_battery_voltage, <span class="string">&quot;%d.000V&quot;</span>, i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;set char *shm_battery_voltage=%s\n&quot;</span>, shm_battery_voltage);</span><br><span class="line">       </span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开共享内存连接</span></span><br><span class="line">    shmdt(shm_device_status);</span><br><span class="line">    shmdt(shm_battery_voltage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>共享内存读进程process_d.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * process_c 文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;error.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**引入公共定义好的共享变量参数 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;shm_util.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 第一个共享变量</span></span><br><span class="line">    <span class="type">key_t</span> shmKey = ftok(SHMPATHNAME_PROCESS, SHMID_DEVICE_STATUS);  <span class="comment">// 创建一个唯一的键</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == shmKey) &#123;</span><br><span class="line">        perror(<span class="string">&quot;获取 SHMPATHNAME_PROCESS  SHMID_DEVICE_STATUS 的shmKey异常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> shmid = shmget(shmKey, SHMSIZE_STATUS, IPC_CREAT|<span class="number">0600</span>);   <span class="comment">// 创建共享内存, 内存长度为SHM_SIZE</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (shmid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;shmget SHMID_DEVICE_STATUS error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> *shm_device_status = (<span class="type">int</span> *) shmat(shmid, (<span class="type">void</span>*)<span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 连接共享内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二个共享变量</span></span><br><span class="line">    shmKey = ftok(SHMPATHNAME_PROCESS, SHMID_BATTERY_VOLTAGE);  <span class="comment">// 创建一个唯一的键</span></span><br><span class="line">    shmid = shmget(shmKey, SHMSIZE_VOL, IPC_CREAT|<span class="number">0600</span>);   <span class="comment">// 创建共享内存, 内存长度为SHMSHZI_VOL</span></span><br><span class="line">    <span class="keyword">if</span> (shmid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;shmget SHM_BATTERY_VOLTAGE error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> *shm_battery_voltage = (<span class="type">char</span> *) shmat(shmid, <span class="literal">NULL</span>, <span class="number">0</span>); <span class="comment">// 连接共享内存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">10</span>)</span><br><span class="line">    &#123;   </span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;process_d read int *shm_device_status: %d\n&quot;</span>, *shm_device_status);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;process_d read char *shm_battery_voltage: %s\n&quot;</span>, shm_battery_voltage);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开共享内存连接</span></span><br><span class="line">    shmdt(shm_device_status);</span><br><span class="line">    shmdt(shm_battery_voltage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译Makefile</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">TARGETS = process_c process_d</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 列出所有.c文件</span></span><br><span class="line"><span class="comment"># SRCS = $(wildcard *.c)</span></span><br><span class="line"><span class="comment"># # 根据SRCS生成点o文件</span></span><br><span class="line"><span class="comment"># OBJS = $(patsubst %.c, %.c.o, $(SRCS))</span></span><br><span class="line"></span><br><span class="line">SRCS1=process_c.c</span><br><span class="line">OBJS1=$(SRCS1:.c=.o)</span><br><span class="line"></span><br><span class="line">SRCS2=process_d.c</span><br><span class="line">OBJS2=$(SRCS2:.c=.o)</span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(TARGETS)</span> </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">process_c: <span class="variable">$(OBJS1)</span></span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$^</span> <span class="variable">$(LIBS)</span> <span class="variable">$(LDFLAGS)</span> <span class="variable">$(LOCAL_LDFLAGS)</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">process_d: <span class="variable">$(OBJS2)</span></span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$^</span> <span class="variable">$(LIBS)</span> <span class="variable">$(LDFLAGS)</span> <span class="variable">$(LOCAL_LDFLAGS)</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">process_c.o: process_c.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(INCLUDES)</span> -c <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">process_d.o: process_d.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(INCLUDES)</span> -c <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -rf <span class="variable">$(TARGETS)</span> <span class="variable">$(OBJS1)</span> <span class="variable">$(OBJS2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: all clean</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keyinwang@WondersWL:~/Projects/DemoC/shared_mem$ make</span><br><span class="line">cc   -c process_c.c -o process_c.o</span><br><span class="line">cc process_c.o    -o process_c</span><br><span class="line">cc   -c process_d.c -o process_d.o</span><br><span class="line">cc process_d.o    -o process_d</span><br><span class="line"></span><br><span class="line">// 终端1执行</span><br><span class="line">keyinwang@WondersWL:~/Projects/DemoC/shared_mem$ ./process_c </span><br><span class="line">set int *shm_device_status=0</span><br><span class="line">set char *shm_battery_voltage=0.000V</span><br><span class="line">set int *shm_device_status=1</span><br><span class="line">set char *shm_battery_voltage=1.000V</span><br><span class="line">set int *shm_device_status=2</span><br><span class="line">set char *shm_battery_voltage=2.000V</span><br><span class="line">set int *shm_device_status=3</span><br><span class="line">set char *shm_battery_voltage=3.000V</span><br><span class="line"></span><br><span class="line">// 终端2执行</span><br><span class="line">keyinwang@WondersWL:~/Projects/DemoC/shared_mem$ ./process_d</span><br><span class="line">process_d read int *shm_device_status: 2</span><br><span class="line">process_d read char *shm_battery_voltage: 2.000V</span><br><span class="line">process_d read int *shm_device_status: 2</span><br><span class="line">process_d read char *shm_battery_voltage: 2.000V</span><br><span class="line">process_d read int *shm_device_status: 3</span><br><span class="line">process_d read char *shm_battery_voltage: 3.000V</span><br></pre></td></tr></table></figure>

<p>至此，完成了多个进程只想的共享内存使用。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>嵌入式Linux</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
</search>
